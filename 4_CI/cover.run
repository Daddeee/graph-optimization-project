reset;
reset options;

model cover.mod;

data ../Assignment/instances/i_40_1.dat;

option solver '/home/davide/ampl_linux-intel64/cplex';

#PROBLEM DEFINITION

problem Relaxation: x, y, Installed_VMs, Assignment, Traffic, Cpu, Memory, Cover;
problem SeparationTraffic: u, Violation, CoverConditionTraffic;
problem SeparationCpu: u, Violation, CoverConditionCpu;
problem SeparationMemory: u, Violation, CoverConditionMemory;

param check_violation default 0;
param iter default 0;

param tic;
param toc;
param CI_time;

let tic := _ampl_user_time;

solve Relaxation;

printf "Initial: %g\n", Installed_VMs > results.txt;

param initial default M;
let initial := Installed_VMs;

repeat {
    let check_violation := 0;
    let iter := iter + 1;

    solve Relaxation;

    for {j in 1..M} {

        for {k in 1..N} {
            let x_star[k] := x[k,j];
        }

        solve SeparationTraffic;

        if (Violation < 1) then {
            printf "\nFound violation: traffic, j=%g\n", j > results.txt;
            let check_violation:=1;
            # Update the number of cover inequalities
            let nc := nc + 1;

            # Create new cover 
            let CI[nc] := setof {i in 1..N: u[i] = 1} i;
            printf"CI[%d] := ",nc > results.txt;
            for{l in CI[nc]}
            {
                 printf"%d ",l > results.txt;
            }
            printf"\n" > results.txt;

            solve Relaxation;

            for {k in 1..N} {
                let x_star[k] := x[k,j];
            }
        }

        solve SeparationCpu;

        if (Violation < 1) then {
            printf "\nFound violation: cpu, j=%g\n", j > results.txt;
            let check_violation:=1;
            # Update the number of cover inequalities
            let nc := nc + 1;

            # Create new cover 
            let CI[nc] := setof {i in 1..N: u[i] = 1} i;
            printf"CI[%d] := ",nc > results.txt;
            for{l in CI[nc]}
            {
                 printf"%d ",l > results.txt;
            }
            printf"\n" > results.txt;

            solve Relaxation;

            for {k in 1..N} {
                let x_star[k] := x[k,j];
            }
        }

        solve SeparationMemory;

        if (Violation < 1) then {
            printf "\nFound violation: memory, j=%g\n", j > results.txt;
            let check_violation:=1;
            # Update the number of cover inequalities
            let nc := nc + 1;

            # Create new cover 
            let CI[nc] := setof {i in 1..N: u[i] = 1} i;
            printf"CI[%d] := ",nc > results.txt;
            for{l in CI[nc]}
            {
                 printf"%d ",l > results.txt;
            }
            printf"\n" > results.txt;

            solve Relaxation;

            for {k in 1..N} {
                let x_star[k] := x[k,j];
            }
        }
    }

} until (check_violation == 0);

solve Relaxation;

let toc := _ampl_user_time + _total_solve_user_time;

let CI_time := toc - tic;

param final default M;
let final := Installed_VMs;

printf "Final: %g", Installed_VMs > results.txt;

printf "Time: %g", CI_time > results.txt;

display initial;
display final;
display CI_time;
display nc;